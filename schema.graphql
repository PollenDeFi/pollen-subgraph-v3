enum PollenTokenType {
  pln
  vepln
}

enum ChartType {
  PortfolioManagers
  TotalPlnStaked
  TotalVePlnStaked
  TotalProfitLossPln
  TotalProfitLossVePln
  Delegators
  TotalVePlnDelegated
  TotalPlnDelegated
  TotalDelegationFeesPaid
}

type Asset @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
  totalAllocation: BigInt!
  isRemoved: Boolean!
  addedTimestamp: BigInt!
}

type PortfolioAllocation @entity {
  id: ID!
  asset: Asset!
  amount: BigInt!
  weight: BigInt!
  initialUsdPrice: BigInt!
}

type AssetProfitOrLoss @entity {
  id: ID!
  asset: Asset!
  profitOrLoss: BigDecimal!
}

type PortfolioEntry @entity {
  id: ID!
  plnStake: BigInt!
  vePlnStake: BigInt!
  initialValue: BigInt!
  closingValue: BigInt
  allocations: [PortfolioAllocation!]!
  createdTimestamp: BigInt!
  closedTimestamp: BigInt
  benchmarkValue: BigInt!
}

type VirtualPortfolio @entity {
  id: ID!
  openTimestamp: BigInt!
  updatedTimestamp: BigInt!
  owner: String!
  currentEntry: PortfolioEntry
  isClosed: Boolean!
  rebalances: [PortfolioEntry!]!
  plnStake: BigInt!
  vePlnStake: BigInt!
  rewardsOrPenaltiesPln: BigDecimal!
  rewardsOrPenaltiesVePln: BigDecimal!
  assetsProfitOrLoss: [AssetProfitOrLoss!]!
  ownerStats: UserStat!
  isBenchmark: Boolean!
}

type UserStat @entity {
  id: ID!
  address: String!
  totalPlnDelegatedTo: BigInt!
  totalPlnDelegatedFrom: BigInt!
  totalVePlnDelegatedTo: BigInt!
  totalVePlnDelegatedFrom: BigInt!
  totalDelegators: BigInt!
  reputation: BigDecimal!
  rewardsOrPenaltiesPln: BigDecimal!
  rewardsOrPenaltiesVePln: BigDecimal!
  totalRebalances: BigInt!
  totalDelegationFeesEarned: BigInt!
  totalDelegationFeesPaid: BigInt!
  totalRewardsForDelegators: BigDecimal!
  portfolio: VirtualPortfolio
  portfolioOpen: Boolean!
  updatedTimestamp: BigInt
}

type OverviewStat @entity {
  id: ID!
  assetManagers: [String!]!
  assetManagersCount: BigInt!
  delegators: [String!]!
  delegatorsCount: BigInt!
  totalDelegated: BigDecimal!
  totalVePlnStaked: BigDecimal!
  totalPlnStaked: BigDecimal!
  totalPlnEarnedBurned: BigDecimal!
  totalVePlnEarnedBurned: BigDecimal!
  totalFeesPaid: BigInt!
}

type Delegation @entity {
  id: ID!
  delegator: String!
  delegatee: String!
  rewardsOrPenaltiesPln: BigDecimal!
  rewardsOrPenaltiesVePln: BigDecimal!
  plnAmount: BigInt!
  vePlnAmount: BigInt!
  startTimestamp: BigInt!
  updatedTimestamp: BigInt!
  stopTimestamp: BigInt!
  delegatorStats: UserStat!
  delegateeStats: UserStat!
}

type DelegateDeposit @entity {
  id: ID!
  delegator: String!
  delegatee: String!
  amount: BigInt!
  timestamp: BigInt!
  tokenType: PollenTokenType!
}

type DelegateWithdrawal @entity {
  id: ID!
  delegator: String!
  delegatee: String!
  withdrawAmount: BigInt!
  delegatorRewardPenaltyPln: BigDecimal!
  delegatorRewardPenaltyVePln: BigDecimal!
  delegateFee: BigInt!
  timestamp: BigInt!
  tokenType: PollenTokenType!
}

type PortfolioDeposit @entity {
  id: ID!
  user: String!
  amount: BigInt!
  timestamp: BigInt!
  tokenType: PollenTokenType!
}

type PortfolioStakeWithdrawal @entity {
  id: ID!
  user: String!
  withdrawAmount: BigInt!
  rewardPenaltyPln: BigDecimal!
  rewardPenaltyVePln: BigDecimal!
  timestamp: BigInt!
  tokenType: PollenTokenType!
}

type DailyChartItem @entity {
  id: ID!
  type: ChartType!
  value: BigDecimal!
  timestamp: BigInt!
}

enum PortfolioEventType {
  portfolio_deposit
  portfolio_withdrawal
  portfolio_rebalance
}

enum DelegationEventType {
  delegate_deposit
  delegate_withdrawal
}

type PortfolioEvent @entity {
  id: ID!
  type: PortfolioEventType!
  user: String!
  timestamp: BigInt!
  portfolioDeposit: PortfolioDeposit
  portfolioWithdrawal: PortfolioStakeWithdrawal
  portfolioRebalance: PortfolioEntry
}

type DelegationEvent @entity {
  id: ID!
  type: DelegationEventType!
  timestamp: BigInt!
  delegator: String!
  delegatee: String!
  delegateDeposit: DelegateDeposit
  delegateWithdrawal: DelegateWithdrawal
}

"---Leagues related entities---"
type League @entity {
  id: ID!
  name: String!
  admin: String!
  timestamp: BigInt!
  members: [Member!]! @derivedFrom(field: "leagues")
  membersCount: BigInt!
  totalPlnStaked: BigDecimal!
  totalVePlnStaked: BigDecimal!
  rewardsOrPenaltiesPln: BigDecimal!
  rewardsOrPenaltiesVePln: BigDecimal!
}

type Member @entity {
  id: ID!
  leagues: [League!]!
}

type Invitation @entity {
  id: ID!
  user: String!
  league: League!
}

"---Governance entities---"
type Proposal @entity {
  id: ID!
  submitter: String!
  executer: String!
  timestamp: BigInt!
  yes: BigInt!
  no: BigInt!
}

type VotingTerm @entity {
  id: ID!
  period: BigInt!
  quorum: BigInt!
  timelock: BigInt!
}
